"""
InvenioRDM settings for instance-test-2 project.

This file was automatically generated by 'invenio-cli init'.

For the full list of settings and their values, see
https://inveniordm.docs.cern.ch/reference/configuration/.
"""
from os import environ
from datetime import datetime
from flask_babelex import lazy_gettext as _


def _(x):  # needed to avoid start time failure with lazy strings
    return x


# Flask
# =====
# See https://flask.palletsprojects.com/en/1.1.x/config/

# Define the value of the cache control header `max-age` returned by the server when serving
# public files. Files will be cached by the browser for the provided number of seconds.
# See flask documentation for more information:
# https://flask.palletsprojects.com/en/2.1.x/config/#SEND_FILE_MAX_AGE_DEFAULT
SEND_FILE_MAX_AGE_DEFAULT = 300

# SECURITY WARNING: keep the secret key used in production secret!
# Do not commit it to a source code repository.
# TODO: Set
SECRET_KEY = "CHANGE_ME"

# Since HAProxy and Nginx route all requests no matter the host header
# provided, the allowed hosts variable is set to localhost. In production it
# should be set to the correct host and it is strongly recommended to only
# route correct hosts to the application.
APP_ALLOWED_HOSTS = ["0.0.0.0", "localhost", "127.0.0.1"]


# Flask-SQLAlchemy
# ================
# See https://flask-sqlalchemy.palletsprojects.com/en/2.x/config/

# TODO: Set
SQLALCHEMY_DATABASE_URI = (
    "postgresql+psycopg2://instance-test-2:instance-test-2@localhost/instance-test-2"
)


# Invenio-App
# ===========
# See https://invenio-app.readthedocs.io/en/latest/configuration.html

APP_DEFAULT_SECURE_HEADERS = {
    "content_security_policy": {
        "default-src": [
            "'self'",
            "data:",  # for fonts
            "'unsafe-inline'",  # for inline scripts and styles
            "blob:",  # for pdf preview
            # Add your own policies here (e.g. analytics)
        ],
    },
    "content_security_policy_report_only": False,
    "content_security_policy_report_uri": None,
    "force_file_save": False,
    "force_https": True,
    "force_https_permanent": False,
    "frame_options": "sameorigin",
    "frame_options_allow_from": None,
    "session_cookie_http_only": True,
    "session_cookie_secure": True,
    "strict_transport_security": True,
    "strict_transport_security_include_subdomains": True,
    "strict_transport_security_max_age": 31556926,  # One year in seconds
    "strict_transport_security_preload": False,
}


# Flask-Babel
# ===========
# See https://python-babel.github.io/flask-babel/#configuration

# Default locale (language)
BABEL_DEFAULT_LOCALE = "en"
# Default time zone
BABEL_DEFAULT_TIMEZONE = "Europe/Zurich"


# Invenio-I18N
# ============
# See https://invenio-i18n.readthedocs.io/en/latest/configuration.html

# Other supported languages (do not include BABEL_DEFAULT_LOCALE in list).
I18N_LANGUAGES = [
    # ('de', _('German')),
    # ('tr', _('Turkish')),
]


# Invenio-Theme
# =============
# See https://invenio-theme.readthedocs.io/en/latest/configuration.html

# Frontpage title
THEME_FRONTPAGE_TITLE = "instance-test-2"
# Header logo
THEME_LOGO = "images/invenio-rdm.svg"


# Invenio-App-RDM
# ===============
# See https://invenio-app-rdm.readthedocs.io/en/latest/configuration.html

# Instance's theme entrypoint file. Path relative to the ``assets/`` folder.
INSTANCE_THEME_FILE = "./less/theme.less"


# Invenio-Records-Resources
# =========================
# See https://github.com/inveniosoftware/invenio-records-resources/blob/master/invenio_records_resources/config.py

# TODO: Set with your own hostname when deploying to production
SITE_UI_URL = "https://127.0.0.1"

SITE_API_URL = "https://127.0.0.1/api"

APP_RDM_DEPOSIT_FORM_DEFAULTS = {
    "publication_date": lambda: datetime.now().strftime("%Y-%m-%d"),
    "rights": [
        {
            "id": "cc-by-4.0",
            "title": "Creative Commons Attribution 4.0 International",
            "description": (
                "The Creative Commons Attribution license allows "
                "re-distribution and re-use of a licensed work "
                "on the condition that the creator is "
                "appropriately credited."
            ),
            "link": "https://creativecommons.org/licenses/by/4.0/legalcode",
        }
    ],
    "publisher": "instance-test-2",
}

# See https://github.com/inveniosoftware/invenio-app-rdm/blob/master/invenio_app_rdm/config.py
APP_RDM_DEPOSIT_FORM_AUTOCOMPLETE_NAMES = "search"  # "search_only" or "off"

# Invenio-RDM-Records
# ===================
# See https://inveniordm.docs.cern.ch/customize/dois/
DATACITE_ENABLED = False
DATACITE_USERNAME = ""
DATACITE_PASSWORD = ""
DATACITE_PREFIX = ""
DATACITE_TEST_MODE = True
DATACITE_DATACENTER_SYMBOL = ""

# Authentication - Invenio-Accounts and Invenio-OAuthclient
# =========================================================
# See: https://inveniordm.docs.cern.ch/customize/authentication/

# Invenio-Accounts
# ----------------
# See https://github.com/inveniosoftware/invenio-accounts/blob/master/invenio_accounts/config.py
ACCOUNTS_LOCAL_LOGIN_ENABLED = True  # enable local login
SECURITY_REGISTERABLE = True  # local login: allow users to register
SECURITY_RECOVERABLE = True  # local login: allow users to reset the password
SECURITY_CHANGEABLE = True  # local login: allow users to change psw
SECURITY_CONFIRMABLE = True  # local login: users can confirm e-mail address
SECURITY_LOGIN_WITHOUT_CONFIRMATION = (
    True  # require users to confirm email before being able to login
)

# Invenio-OAuthclient
# -------------------
# See https://github.com/inveniosoftware/invenio-oauthclient/blob/master/invenio_oauthclient/config.py

# Invenio-UserProfiles
# --------------------
USERPROFILES_READ_ONLY = (
    True  # allow users to change profile info (name, email, etc...)
)

# OAI-PMH
# =======
# See https://github.com/inveniosoftware/invenio-oaiserver/blob/master/invenio_oaiserver/config.py

OAISERVER_ID_PREFIX = "instance-test-2.com"
"""The prefix that will be applied to the generated OAI-PMH ids."""

# Invenio-Search
# --------------

SEARCH_INDEX_PREFIX = "instance-test-2-"

# Invenio-app-rdm
APP_RDM_DEPOSIT_FORM_PUBLISH_MODAL_EXTRA = """
<div class='column'>
    <h2>Example body text</h2>
    <p>Nullam quis risus eget <a href='#'>urna mollis ornare</a> vel eu leo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nullam id dolor id nibh ultricies vehicula.</p>
    <p><small>This line of text is meant to be treated as fine print.</small>The following snippet of text is <strong>rendered as bold text</strong>.</p>
    <p>The following snippet of text is <em>rendered as italicized text</em>.An abbreviation of the word attribute is <abbr title='attribute'>attr</abbr>.</p>
    <p>by submitting to our community you agreeing on our <a href='https://github.com/inveniosoftware/invenio-app-rdm/pull/1832/files' target='_blank'>terms and services</a></p>
    <div class='ui checkbox checked'>
          <input type='checkbox' tabindex='0' required>
          <label>I agree to the Terms and Conditions</label>
    </div>
  </div>
"""
"""Additional text/html to be displayed in the publish and submit for review modal."""

# invenio-oauthclient
# -------------------
#   https://graph.microsoft.com/v1.0/me
#   Response example
# {
#     "@odata.context": "https://graph.microsoft.com/v1.0/$metadata#users/$entity",
#     "businessPhones": [
#         "+1 412 555 0109"
#     ],
#     "displayName": "Megan Bowen",
#     "givenName": "Megan",
#     "jobTitle": "Auditor",
#     "mail": "MeganB@M365x214355.onmicrosoft.com",
#     "mobilePhone": null,
#     "officeLocation": "12/1110",
#     "preferredLanguage": "en-US",
#     "surname": "Bowen",
#     "userPrincipalName": "MeganB@M365x214355.onmicrosoft.com",
#     "id": "48d31887-5fad-4d73-a9f5-3c356e68a038"
# }

import requests
from flask import current_app, redirect, url_for
from invenio_oauthclient.contrib.settings import OAuthSettingsHelper
from invenio_oauthclient.utils import oauth_link_external_id, oauth_unlink_external_id
from invenio_oauthclient.handlers.utils import require_more_than_one_external_account
from invenio_oauthclient.handlers.rest import response_handler
from invenio_oauthclient.models import RemoteAccount
from flask_login import current_user
from invenio_oauthclient import current_oauthclient
from invenio_db import db
class AzureOAuthSettingsHelper(OAuthSettingsHelper):
    """Default configuration for Azure OAuth provider."""
    # import pdb;pdb.pdb.set_trace()
    def __init__(
        self,
        title=None,
        description=None,
        base_url=None,
        request_token_params=None,
        app_key=None,
        access_token_url=None,
        authorize_url=None,
        precedence_mask=None,
        signup_options=None,
    ):
        """Constructor."""
        base_url="https://login.microsoftonline.com"
        access_token_url ="https://login.microsoftonline.com/organizations/oauth2/v2.0/token"
        authorize_url ="https://login.microsoftonline.com/organizations/oauth2/v2.0/authorize"
        signup_options = {"auto_confirm": True, "send_register_msg": False}
        request_token_params = {"scope": "openid email profile"} # https://learn.microsoft.com/en-us/azure/active-directory/develop/scopes-oidc"
        content_type="application/json"
        super().__init__(
            title=title or "KTH SSO",
            description=description or "Microsoft Outlook",
            base_url=base_url
            or "https://login.microsoftonline.com/organizations/oauth2/v2.0/authorize",
            request_token_params=request_token_params,
            app_key=app_key or "AZURE_APP_CREDENTIALS",
            access_token_url=access_token_url,
            precedence_mask=precedence_mask,
            content_type=content_type,
            signup_options=signup_options,
            authorize_url=authorize_url,
        )
        self._handlers = dict(
            authorized_handler="invenio_oauthclient.handlers"
            ":authorized_signup_handler",
            disconnect_handler=azure_disconnect_handler,
            signup_handler=dict(
                info_serializer=azure_account_info_serializer,
                info=azure_account_info,
                setup=azure_account_setup,
                view="invenio_oauthclient.handlers:signup_handler",
            ),
        )

        self._rest_handlers = dict(
            authorized_handler="invenio_oauthclient.handlers.rest"
            ":authorized_signup_handler",
            disconnect_handler=disconnect_rest_handler,
            signup_handler=dict(
                info=azure_account_info,
                setup=azure_account_setup,
                view="invenio_oauthclient.handlers.rest:signup_handler",
            ),
            response_handler="invenio_oauthclient.handlers.rest"
            ":default_remote_response_handler",
            authorized_redirect_url="/",
            disconnect_redirect_url="/",
            signup_redirect_url="/",
            error_redirect_url="/",
        )
    def get_handlers(self):
        """Return Azure auth handlers."""
        return self._handlers

    def get_rest_handlers(self):
        """Return Azure auth REST handlers."""
        return self._rest_handlers

@require_more_than_one_external_account
def _disconnect(remote, *args, **kwargs):
    """Handle unlinking of remote account.

    :param remote: The remote application.
    """

    # import pdb;pdb.pdb.set_trace()
    if not current_user.is_authenticated:
        return current_app.login_manager.unauthorized()

    account = RemoteAccount.get(
        user_id=current_user.get_id(), client_id=remote.consumer_key
    )
    user_external_id = account.extra_data.get("external_id")

    if user_external_id:
        oauth_unlink_external_id({"method": "azure", "id": user_external_id})
    if account:
        # pylint: disable=no-member
        with db.session.begin_nested():
            account.delete()

def azure_disconnect_handler(remote, *args, **kwargs):
    """Handle unlinking of remote account.

    :param remote: The remote application.
    """
    _disconnect(remote, *args, **kwargs)
    return redirect(url_for("invenio_oauthclient_settings.index"))

def disconnect_rest_handler(remote, *args, **kwargs):
    """Handle unlinking of remote account.

    :param remote: The remote application.
    """
    _disconnect(remote, *args, **kwargs)
    redirect_url = current_app.config["OAUTHCLIENT_REST_REMOTE_APPS"][remote.name][
        "disconnect_redirect_url"
    ]
    return response_handler(remote, redirect_url)


def azure_account_info_serializer(remote, resp, **kwargs):
    """Serialize the account info response object.
    :param remote: The remote application.
    :param resp: The response of the `authorized` endpoint.
    :returns: A dictionary with serialized user information.
    """
    external_id = str(resp.get("id"))
    email = str(resp.get("userPrincipalName")).lower()
    username = f"{resp.get('givenName')}_{resp.get('id').split('-')[0]}"
    full_name = str(resp.get("displayName"))
    external_method = str(remote.name)
    affiliation= str(resp.get("jobTitle", "User"))
    return dict(
        user=dict(
            email=email,
            profile=dict(username=username, full_name=full_name),
        ),
        external_id=external_id,
        external_method=external_method,
        affiliations=affiliation,
        active=True,
    )


def fetch_user_graph_data(token):
    """Fetch Microsoft Graph data for current user."""
    azure_graph_me_url = "https://graph.microsoft.com/v1.0/me"
    timeout = 10
    if not token:
        raise ValueError("Token is empty or None")
    try:
        response = requests.get(azure_graph_me_url, headers={'Authorization': 'Bearer ' + token}, timeout=timeout)
        response.raise_for_status()
        data = response.json()
        return data
    except requests.exceptions.HTTPError as err:
        message = f"HTTP error occurred: {err}"
    except requests.exceptions.Timeout as err:
        message = f"Request timed out: {err}"
    except requests.exceptions.RequestException as err:
        message = f"An error occurred: {err}"
    raise ValueError(message)


def azure_account_info(remote, resp):
    """Retrieve remote account information used to find local user."""
    handlers = current_oauthclient.signup_handlers[remote.name]
    if "access_token" in resp:
        graph_data = fetch_user_graph_data(resp['access_token'])
        return handlers["info_serializer"](graph_data)


def azure_account_setup(remote, token, resp):
    """Perform additional setup after user have been logged in."""
    # pylint: disable=no-member
    with db.session.begin_nested():
        graph_data = fetch_user_graph_data(token.access_token)
        user = token.remote_account.user
        external_id = str(graph_data.get("id"))
        token.remote_account.extra_data = {
            "external_id": external_id,
        }
        oauth_link_external_id(user, dict(id=external_id, method="azure"))


    # import pdb;pdb.pdb.set_trace()

AzureOAuthHelper = AzureOAuthSettingsHelper()

OAUTHCLIENT_REMOTE_APPS = dict(
    azure=AzureOAuthHelper.remote_app,
)

AZURE_APP_CREDENTIALS = dict(
    consumer_key=environ.get("CONSUMER_KEY"),
    consumer_secret=environ.get("CONSUMER_SECRET"),
)

# https://github.com/AzureAD/microsoft-authentication-library-for-python#usage
# https://github.com/AzureAD/microsoft-authentication-library-for-python/blob/dev/sample/confidential_client_secret_sample.py
# https://www.youtube.com/watch?v=1Jyd7SA-0kI&ab_channel=JieJenn

